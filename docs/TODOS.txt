TODOs for v1 of this thing:



Left side needs an “audit table” that gathers all the “should run” calls.  Don’t need a materialized calendar just yet

Dashboard updates
* Don’t need total users
* Make total schedules / active schedules actually reflect data
* Recent activity should be a combination of the audit data + rollup of ui edits
* Server health maybe oughta update itself every 60 seconds?

Top header thing “Dashboard, Home / Dashboard” is not functional.  Ask about what it needs to be functional

Investigate what we’ll want for users
* Admin and invite thingy?
* Do we just do generic OAuth and walk on
* Answers to this will help decide what to do with icon in top-right.
* We expect app users and people users

Left side needs a “Calendars” function
* Will effectively be a view-only function that lets user pick a schedule, look at calendar, pick a version, maybe toggles for overrides / etc
* Pick a decent calendaring component for this
* May bake in an export to ics or something, that’s supposed to be trivial

Future function for generic web hook functionality
* Ask Claude what this would take — we’d normally just drop a teams plugin and move, but that’s challenging
* It’s a builder (daily / weekly / monthly), sends content somewhere, blah blah blah

Need some better validation on the cron expression guy
* build out those samples too

Rewrite the README.md file
* talk about reflections on claude / gemini


The UI needs an audit log screen -- whenever "should run" is called" ScheduleQueryLog records are saved to the database.
Please add an item to the sidebar and another component for this information.  This will be another page alongside Dashboard and Schedules.

For the first iteration, let's display all the items sorted from newest to oldest.  We can use the sortable table logic previously developed for the Schedules list if that's easy enough.
